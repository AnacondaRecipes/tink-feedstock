From b498696826fdbfdaada1cc08b7353ee8e882ba83 Mon Sep 17 00:00:00 2001
From: Lorenzo Pirritano <lpirritano@anaconda.com>
Date: Tue, 4 Mar 2025 10:40:54 +0100
Subject: [PATCH 2/2] clear bazel output_base path for win

---
 setup.py | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index d8d7630..815188e 100644
--- a/setup.py
+++ b/setup.py
@@ -138,7 +138,10 @@ class BuildBazelExtension(build_ext.build_ext):
 
     # Ensure no artifacts from previous builds are reused (i.e. from builds
     # using a different Python version).
-    self.spawn([self.bazel_command, 'clean', '--expunge'])
+    if platform.system() == 'Windows':
+      self.spawn([self.bazel_command, r'--output_base=C:\O', 'clean', '--expunge'])
+    else:
+      self.spawn([self.bazel_command, 'clean', '--expunge'])
 
     bazel_startup_args = []
     bazel_build_args = [
@@ -158,10 +161,12 @@ class BuildBazelExtension(build_ext.build_ext):
       # https://github.com/protocolbuffers/protobuf/issues/12947
       bazel_startup_args += [r'--output_base=C:\O']
       # Required to shutdown Bazel and make it ready for the next build
-      bazel_startup_args += [r'--max_idle_secs=1']
+      bazel_startup_args += ['--max_idle_secs=1']
       # Needed by pybind11_bazel.
       os.environ['PYTHON_BIN_PATH'] = sys.executable
       os.environ['PYTHON_LIB_PATH'] = os.path.join(sys.exec_prefix, 'lib')
+      print("Using PYTHON_BIN_PATH as:", os.environ['PYTHON_BIN_PATH'])
+      print("Using PYTHON_LIB_PATH as:", os.environ['PYTHON_LIB_PATH'])
       lib_extension = '.pyd'
 
     # Run build command.
-- 
2.39.1

